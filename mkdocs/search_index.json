{
    "docs": [
        {
            "location": "/",
            "text": "Introduction to Docker Volume Driver for vSphere\n\n\nDocker volume driver is designed to solve persistency needs for \nstateful containers running on top of VMware's stack.\n\n\nSome of the high level features for the plugin are: \n\n\n\n\nDesigned to run over shared storage in a cluster (Single node \ntest setups supported as well)\n\n\nEasy to deploy and manage. There is zero configuration and \nzero credential management.\n\n\nIntegrated with vCenter and Photon Controller",
            "title": "Home"
        },
        {
            "location": "/#introduction-to-docker-volume-driver-for-vsphere",
            "text": "Docker volume driver is designed to solve persistency needs for \nstateful containers running on top of VMware's stack.  Some of the high level features for the plugin are:    Designed to run over shared storage in a cluster (Single node \ntest setups supported as well)  Easy to deploy and manage. There is zero configuration and \nzero credential management.  Integrated with vCenter and Photon Controller",
            "title": "Introduction to Docker Volume Driver for vSphere"
        },
        {
            "location": "/install/",
            "text": "Install on ESX\n\n\n\n\nInstall on VM",
            "title": "Installation and Deployment"
        },
        {
            "location": "/install/#install-on-esx",
            "text": "",
            "title": "Install on ESX"
        },
        {
            "location": "/install/#install-on-vm",
            "text": "",
            "title": "Install on VM"
        },
        {
            "location": "/vmdkops-admin-cli-spec/",
            "text": "In order to manage the inventory of VMDKs created and used by multiple docker engines we must have\nan administrative CLI that lives on ESX. This administrative CLI can provide additional status such\nas access control, storage policies, and disk usage and capacity.\n\n\nThe admin cli itself is non-interactive. All commands are of the form \nvmdkops-admin <Cmd> [Arg1, Arg2,...]\n\n\nAll output from the admin cli defaults to human readable formats. It will be made easily grepable.\n\n\nThe majority of testing will be automated. We can ensure that parsing calls the right callbacks with\nthe right information by generating representative input and mocking the callbacks to assert that\nthe right information is parsed and delivered correctly. Additionally, and specifically for testing\nroles, we can create roles and then test that they act as expected by calling \nrole get\n. Unit\ntests for stateless logic can be fed mock input representing data from sidecar and the filesystem.\nThese techniques should be sufficient enough to provide confidence in the implementation.\n\n\nThe rest of this specification will detail the commands to be implemented in the admin cli. Note\nthat the commands covered in this document only operate on a single ESX host.\n\n\nls\n\n\nList all volumes by reading the \ndockvols\n directories and metadata stored in Sidecar files.\nVolumes in all datastores will be shown with the volume name in the first column and the datastore\nin the second.\n\n\nls\n supports the following options:\n  * No options - List the names of all volumes\n  * \nls -l\n - List all volumes and their corresponding metadata. Note that missing metadata will be\n    marked \nN/A\n.\n    * Created by (VM Name)\n    * Creation Time\n    * Last Attached Time\n    * Datastore\n    * Policy Name\n    * Capacity\n    * Used Space\n    * Attached To (VM Name)\n  * \nls -c [Column1, Column2, ...]\n - List only the columns specified, implies \n-l\n\n  * \nls -f <ColumnName Pattern Value>\n - Filter output by only including volumes whose columns match the\n                                         sort pattern (See below). Note that the priority is P2 on\n                                         this and it may be developed after the initial release\n                                         depending on timing/effort.\n\n\nSort patterns are used for filtering. The argument, \nX\n, itself is of a type specific to the attribute. All dates are given in \nISO 8601 format\n\n\n\n\n> X\n The attribute is greater than X\n\n\n< X\n The attribute is equal to X\n\n\n= X\n The attribute matches a Glob X\n\n\n\n\nExamples:\n\n\nvmdkops-admin ls -c CreatedBy,CreationTime,Datastore,PolicyName\nvmdkops-admin ls -f 'LastAttachedTime > 2016-03-11'\nvmdkops-admin ls -f 'AttachedTo = Test*'\n\n\n\n\npolicy\n\n\nCreate, configure and show the VSAN policy names and their corresponding VSAN policies. Also show whether or not they are in use.\n\n\nExamples:\n * \nvmdkops-admin policy create --name=myPolicy --content=\"string\"\n - Create a new policy\n * \nvmdkops-admin policy rm myPolicy\n - Remove the given policy\n * \nvmdkops-admin policy ls\n - List policies and the Volumes that are using that policy.\n * \nvmdkops-admin policy update --name=myPolicy --content=\"string\"\n - Update an existing VSAN policy and\n   any volumes currently using that policy\n\n\nNote that on volume creation from docker, a policy name will be passed with a \n-o\n option.\n\n\nrole\n\n\nCreate, delete, configure and show access control settings. Access control settings are assigned via a\nVM naming convention, although a specific convention is not required. An example will help clarify\nthis. Let's say that an administrator wants to allow any \nTest\n VM to create, delete and mount\nvolumes, and only allow creation of volumes of a maximum size of 2TB. The admin would first create a\n\nTest\n role specifying these permissions, as well as a glob indicating the vm naming convention that\nthe role should be applied to. In this instance the permissions in the role \nTest\n will be applied to any VM with a\nname ending in \nTest\n. Since the admin creates the VMs they can control the naming convention and\npermissions in a straightforward manner.\n\n\nvmdkops-admin role create --name=Test --matches-vm=\\*Test --volume-maxsize=2TB --rights=create,delete,mount\n\n\nrole create\n accepts the following options as shown in the prior example:\n * \n--name=<Name>\n - The name of the role to be created\n * \n--matches-vm=<Glob>\n - The glob that matches VM names where the role should be applied. This\n                           flag may be applied multiple times, where a VM matching any of the globs would\n                           apply.\n * \n--rights=<Perm1,Perm2,...>\n - The permissions granted to matching VMs. The list of applicable rights is:\n   * \ncreate\n - Allow volume creation. If the \n--volume-maxsize\n parameter is given it applies to create, otherwise size is unlimited.\n   * \nrm\n - Allow volume deletion\n   * \nmount\n - Allow volume mounting\n\n\nCurrently the idea is to allow volume deletion and mounting of any volume if the rights are granted.\nHowever it may make sense to limit these to specific volumes, perhaps via a glob match.\n\n\nNote that the \n--volume-maxsize\n parameter is human readable and given in the following format: \nMB | GB | TB\n.\n\n\nBesides \nrole create\n, there are 4 other commands with regards to roles. Roles can be deleted with\n\nrole rm\n and listed with \nrole ls\n. Listing of roles will show all roles and the VMs they apply\nto. \nrole set\n takes identical paramters to role create, except it will update an existing role\nonly. Finally, there needs to be a way to check permissions. This can be performed with the \nrole\nget\n command. \nrole get\n takes a VM name and returns both a list of the rights granted to the VM and\nthe roles that the VM matches on separate lines.\n\n\nExamples are provided below.\n\n\nExamples:\n * \nvmdkops-admin role create --name=myrole --matches-vm=\"glob expression over vm names\" --volume-maxsize=2TB --rights=create,delete,mount\n\n * \nvmdkops-admin role rm myrole\n\n * \nvmdkops-admin role ls\n\n * \nvmdkops-admin role set --name=myrole --matches-vm=\"glob expression over vm names\" --volume-maxsize=4TB --rights=create,mount\n\n * \nvmdkops-admin role get <VmName>\n\n\nRole information is stored in a flat file, for lack of a better solution. The format of the file\nis JSON, but the schema is currently undefined. Permission checking will need to be performed at\nruntime by the ESX service, using the information provided by \nvmdkops-admin role get <VmName>\n. It\ndoes seem inefficient to call out to a separate command to perform the check, but this allows the\nsimplest implementation and isolation of admin information inside a single script.\n\n\nStatus\n\n\nShow any interesting information about the service. This includes file paths of config files, version\ninformation, and PID of running service. A simple example is shown here, although it's possible\nthat the exact format may be somewhat different.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py status\nVersion: 1.0.0-0.0.1\nStatus: Running\nPid: 73114\nPort: 1019\nLogConfigFile: /etc/vmware/vmdkops/log_config.json\nLogFile: /var/log/vmware/vmdk_ops.log\nLogLevel: INFO\n\n\n\n\nhelp\n\n\nShow help as described in this doc.",
            "title": "Admin CLI"
        },
        {
            "location": "/vmdkops-admin-cli-spec/#ls",
            "text": "List all volumes by reading the  dockvols  directories and metadata stored in Sidecar files.\nVolumes in all datastores will be shown with the volume name in the first column and the datastore\nin the second.  ls  supports the following options:\n  * No options - List the names of all volumes\n  *  ls -l  - List all volumes and their corresponding metadata. Note that missing metadata will be\n    marked  N/A .\n    * Created by (VM Name)\n    * Creation Time\n    * Last Attached Time\n    * Datastore\n    * Policy Name\n    * Capacity\n    * Used Space\n    * Attached To (VM Name)\n  *  ls -c [Column1, Column2, ...]  - List only the columns specified, implies  -l \n  *  ls -f <ColumnName Pattern Value>  - Filter output by only including volumes whose columns match the\n                                         sort pattern (See below). Note that the priority is P2 on\n                                         this and it may be developed after the initial release\n                                         depending on timing/effort.  Sort patterns are used for filtering. The argument,  X , itself is of a type specific to the attribute. All dates are given in  ISO 8601 format   > X  The attribute is greater than X  < X  The attribute is equal to X  = X  The attribute matches a Glob X   Examples:  vmdkops-admin ls -c CreatedBy,CreationTime,Datastore,PolicyName\nvmdkops-admin ls -f 'LastAttachedTime > 2016-03-11'\nvmdkops-admin ls -f 'AttachedTo = Test*'",
            "title": "ls"
        },
        {
            "location": "/vmdkops-admin-cli-spec/#policy",
            "text": "Create, configure and show the VSAN policy names and their corresponding VSAN policies. Also show whether or not they are in use.  Examples:\n *  vmdkops-admin policy create --name=myPolicy --content=\"string\"  - Create a new policy\n *  vmdkops-admin policy rm myPolicy  - Remove the given policy\n *  vmdkops-admin policy ls  - List policies and the Volumes that are using that policy.\n *  vmdkops-admin policy update --name=myPolicy --content=\"string\"  - Update an existing VSAN policy and\n   any volumes currently using that policy  Note that on volume creation from docker, a policy name will be passed with a  -o  option.",
            "title": "policy"
        },
        {
            "location": "/vmdkops-admin-cli-spec/#role",
            "text": "Create, delete, configure and show access control settings. Access control settings are assigned via a\nVM naming convention, although a specific convention is not required. An example will help clarify\nthis. Let's say that an administrator wants to allow any  Test  VM to create, delete and mount\nvolumes, and only allow creation of volumes of a maximum size of 2TB. The admin would first create a Test  role specifying these permissions, as well as a glob indicating the vm naming convention that\nthe role should be applied to. In this instance the permissions in the role  Test  will be applied to any VM with a\nname ending in  Test . Since the admin creates the VMs they can control the naming convention and\npermissions in a straightforward manner.  vmdkops-admin role create --name=Test --matches-vm=\\*Test --volume-maxsize=2TB --rights=create,delete,mount  role create  accepts the following options as shown in the prior example:\n *  --name=<Name>  - The name of the role to be created\n *  --matches-vm=<Glob>  - The glob that matches VM names where the role should be applied. This\n                           flag may be applied multiple times, where a VM matching any of the globs would\n                           apply.\n *  --rights=<Perm1,Perm2,...>  - The permissions granted to matching VMs. The list of applicable rights is:\n   *  create  - Allow volume creation. If the  --volume-maxsize  parameter is given it applies to create, otherwise size is unlimited.\n   *  rm  - Allow volume deletion\n   *  mount  - Allow volume mounting  Currently the idea is to allow volume deletion and mounting of any volume if the rights are granted.\nHowever it may make sense to limit these to specific volumes, perhaps via a glob match.  Note that the  --volume-maxsize  parameter is human readable and given in the following format:  MB | GB | TB .  Besides  role create , there are 4 other commands with regards to roles. Roles can be deleted with role rm  and listed with  role ls . Listing of roles will show all roles and the VMs they apply\nto.  role set  takes identical paramters to role create, except it will update an existing role\nonly. Finally, there needs to be a way to check permissions. This can be performed with the  role\nget  command.  role get  takes a VM name and returns both a list of the rights granted to the VM and\nthe roles that the VM matches on separate lines.  Examples are provided below.  Examples:\n *  vmdkops-admin role create --name=myrole --matches-vm=\"glob expression over vm names\" --volume-maxsize=2TB --rights=create,delete,mount \n *  vmdkops-admin role rm myrole \n *  vmdkops-admin role ls \n *  vmdkops-admin role set --name=myrole --matches-vm=\"glob expression over vm names\" --volume-maxsize=4TB --rights=create,mount \n *  vmdkops-admin role get <VmName>  Role information is stored in a flat file, for lack of a better solution. The format of the file\nis JSON, but the schema is currently undefined. Permission checking will need to be performed at\nruntime by the ESX service, using the information provided by  vmdkops-admin role get <VmName> . It\ndoes seem inefficient to call out to a separate command to perform the check, but this allows the\nsimplest implementation and isolation of admin information inside a single script.",
            "title": "role"
        },
        {
            "location": "/vmdkops-admin-cli-spec/#status",
            "text": "Show any interesting information about the service. This includes file paths of config files, version\ninformation, and PID of running service. A simple example is shown here, although it's possible\nthat the exact format may be somewhat different.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py status\nVersion: 1.0.0-0.0.1\nStatus: Running\nPid: 73114\nPort: 1019\nLogConfigFile: /etc/vmware/vmdkops/log_config.json\nLogFile: /var/log/vmware/vmdk_ops.log\nLogLevel: INFO",
            "title": "Status"
        },
        {
            "location": "/vmdkops-admin-cli-spec/#help",
            "text": "Show help as described in this doc.",
            "title": "help"
        },
        {
            "location": "/docker-volume-cli/",
            "text": "Using the plugin in Docker",
            "title": "Basic commands"
        },
        {
            "location": "/docker-volume-cli/#using-the-plugin-in-docker",
            "text": "",
            "title": "Using the plugin in Docker"
        },
        {
            "location": "/datastores/",
            "text": "Consuming multiple data stores",
            "title": "Multiple Datastores"
        },
        {
            "location": "/datastores/#consuming-multiple-data-stores",
            "text": "",
            "title": "Consuming multiple data stores"
        },
        {
            "location": "/esx-overview/",
            "text": "Docker volumes on ESX",
            "title": "Volume Layout"
        },
        {
            "location": "/esx-overview/#docker-volumes-on-esx",
            "text": "",
            "title": "Docker volumes on ESX"
        },
        {
            "location": "/vcenter/",
            "text": "",
            "title": "Integration with vCenter"
        },
        {
            "location": "/vsan-policy/",
            "text": "",
            "title": "VSAN Policy"
        }
    ]
}