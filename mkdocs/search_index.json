{
    "docs": [
        {
            "location": "/",
            "text": "Introduction to Docker Volume Driver for vSphere\n\u00b6\n\n\nDocker volume driver is designed to solve persistency needs for \nstateful containers running on top of VMware\u2019s stack.\n\n\nSome of the high level features for the plugin are: \n\n\n\n\nDesigned to run over shared storage in a cluster (Single node\n setup for testing is supported)\n\n\nEasy to deploy and manage. There is zero configuration and \nzero credential management. \n\n\nSupport for VSAN policy.\n\n\nIntegration with vCenter (under development)\n\n\nBackup of Docker volumes (under development)\n\n\n\n\nThis plugin is integrated with \nDocker Volume Plugin framework\n. This plugin does not need credential management or configuration management. \n\n\nFeedback\n\u00b6\n\n\nOn going work and feature requests are tracked using \nGitHub Issues\n. Please feel free to file \nissues\n or email \ncna-storage@vmware.com\n\n\nDocumentation Version\n\u00b6\n\n\nThe documentation here is for the latest release. The current master documentation can be found in markdown format in the \ndocumentation folder\n. For older releases, browse to \nreleases\n select the release, click on the tag for the release and browse the docs folder.",
            "title": "Home"
        },
        {
            "location": "/#introduction-to-docker-volume-driver-for-vsphere",
            "text": "Docker volume driver is designed to solve persistency needs for \nstateful containers running on top of VMware\u2019s stack.  Some of the high level features for the plugin are:    Designed to run over shared storage in a cluster (Single node\n setup for testing is supported)  Easy to deploy and manage. There is zero configuration and \nzero credential management.   Support for VSAN policy.  Integration with vCenter (under development)  Backup of Docker volumes (under development)   This plugin is integrated with  Docker Volume Plugin framework . This plugin does not need credential management or configuration management.",
            "title": "Introduction to Docker Volume Driver for vSphere"
        },
        {
            "location": "/#feedback",
            "text": "On going work and feature requests are tracked using  GitHub Issues . Please feel free to file  issues  or email  cna-storage@vmware.com",
            "title": "Feedback"
        },
        {
            "location": "/#documentation-version",
            "text": "The documentation here is for the latest release. The current master documentation can be found in markdown format in the  documentation folder . For older releases, browse to  releases  select the release, click on the tag for the release and browse the docs folder.",
            "title": "Documentation Version"
        },
        {
            "location": "/features/vcenter/",
            "text": "vCenter Integration\n\u00b6\n\n\nvCenter Plugin integration is under development.\nPlease file any requirements as \nGitHub Issues\n or email  \ncna-storage@vmware.com",
            "title": "Integration with vCenter"
        },
        {
            "location": "/features/vcenter/#vcenter-integration",
            "text": "vCenter Plugin integration is under development.\nPlease file any requirements as  GitHub Issues  or email   cna-storage@vmware.com",
            "title": "vCenter Integration"
        },
        {
            "location": "/features/vsan-policy/",
            "text": "What is VSAN\n\u00b6\n\n\nVSAN\n is a shared storage (all ESX nodes in a cluster can access the same VSAN store), hyper-converged (VSAN is integrated into vSphere and runs on the same hardware nodes that vSphere manages), flash optimized storage offering from VMware.\n\n\nVSAN Policy\n\u00b6\n\n\nVSAN provides software defined storage and for each storage object it can specify the policy which controls attributes such as Number of failures to be tolerated.\n\n\nMapping Docker volumes to VSAN objects with policy\n\u00b6\n\n\nUsing the Admin CLI an IT admin can create the policies that can be consumed by Docker volumes. The Docker admin can then create a volume using the policies available.\n\n\nvmdkops-admin policy create --name=myPolicy --content=\"string\"\ndocker volume create -o policy=myPolicy",
            "title": "VSAN Policy"
        },
        {
            "location": "/features/vsan-policy/#what-is-vsan",
            "text": "VSAN  is a shared storage (all ESX nodes in a cluster can access the same VSAN store), hyper-converged (VSAN is integrated into vSphere and runs on the same hardware nodes that vSphere manages), flash optimized storage offering from VMware.",
            "title": "What is VSAN"
        },
        {
            "location": "/features/vsan-policy/#vsan-policy",
            "text": "VSAN provides software defined storage and for each storage object it can specify the policy which controls attributes such as Number of failures to be tolerated.",
            "title": "VSAN Policy"
        },
        {
            "location": "/features/vsan-policy/#mapping-docker-volumes-to-vsan-objects-with-policy",
            "text": "Using the Admin CLI an IT admin can create the policies that can be consumed by Docker volumes. The Docker admin can then create a volume using the policies available.  vmdkops-admin policy create --name=myPolicy --content=\"string\"\ndocker volume create -o policy=myPolicy",
            "title": "Mapping Docker volumes to VSAN objects with policy"
        },
        {
            "location": "/user-guide/install/",
            "text": "Introduction\n\u00b6\n\n\nDocker volume vSphere plugin requires is simple to install. It has zero configuration and and zero credential management post install.\n\n\nTagged releases\n include the software bundles to install on ESX and on the VM.\n\n\nIn addition the \nmake build-all\n will generate the packages.\n\n\nInstall on ESX\n\u00b6\n\n\nVIB\n and \nOffline Depot\n are the packages built to install the backend for the plugin on ESX. The backend can be installed using esxcli or vmware tools such as \nVUM\n\n\nHere is a demo show casing esxcli\n\n\n\n\n\nInstall on VM\n\u00b6\n\n\nWe currently package the plugin as a RPM and Deb package. This is to be able to start the plugin before Docker engine starts. We will also support Docker plugin framework once it is ready.\n\n\nHere is a demo showcasing the install in a Photon OS VM.",
            "title": "Installation and Deployment"
        },
        {
            "location": "/user-guide/install/#introduction",
            "text": "Docker volume vSphere plugin requires is simple to install. It has zero configuration and and zero credential management post install.  Tagged releases  include the software bundles to install on ESX and on the VM.  In addition the  make build-all  will generate the packages.",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/install/#install-on-esx",
            "text": "VIB  and  Offline Depot  are the packages built to install the backend for the plugin on ESX. The backend can be installed using esxcli or vmware tools such as  VUM  Here is a demo show casing esxcli",
            "title": "Install on ESX"
        },
        {
            "location": "/user-guide/install/#install-on-vm",
            "text": "We currently package the plugin as a RPM and Deb package. This is to be able to start the plugin before Docker engine starts. We will also support Docker plugin framework once it is ready.  Here is a demo showcasing the install in a Photon OS VM.",
            "title": "Install on VM"
        },
        {
            "location": "/user-guide/admin-cli/",
            "text": "Introduction\n\n\nls\n\n\nHelp\n\n\nList All\n\n\nList selected columns\n\n\n\n\n\n\npolicy\n\n\nHelp\n\n\nCreate\n\n\nList\n\n\nUpdate\n\n\nRemove\n\n\n\n\n\n\nSet\n\n\nStatus\n\n\n\n\n\n\nIntroduction\n\u00b6\n\n\nIn the context of the Docker volume plugin for vSphere, each ESXi host manages multiple VMs, with\neach of them acting as a Docker host. The Docker engine on these hosts communicates with the Docker\nvolume plugin in order to create and delete virtual disks (VMDKs), as well as mount them as Docker\nvolumes. These virtual disks may live on any datastore accessible to the ESXi host and are managed\nby the Docker user via the Docker CLI. However, the Docker CLI is limited in what visibility it can\nprovide to the user. Furthermore, it is desirable that an administrator be able to get a global view\nof all virtual disks created and in use on the host.  For these reasons, an admin CLI has been\ncreated that runs on the ESXi host and that provides access to information not visible from the\nDocker CLI. The remainder of this document will describe each admin CLI command and provide examples\nof their usage.\n\n\nls\n\u00b6\n\n\nHelp\n\u00b6\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls -h\nusage: vmdkops_admin.py ls [-h] [-c Col1,Col2,...]\n\noptional arguments:\n  -h, --help        show this help message and exit\n  -c Col1,Col2,...  Display selected columns: Choices = ['volume',\n                    'datastore', 'created-by', 'created', 'attached-to',\n                    'policy', 'capacity', 'used']\n\n\n\n\nList All\n\u00b6\n\n\nList all properties for all Docker volumes that exist on datastores accessible to the host.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls\nVolume     Datastore   Created By VM  Created                   Attached To VM  Policy  Capacity  Used\n---------  ----------  -------------  ------------------------  --------------  ------  --------  -------\nlarge-vol  datastore1  Ubuntu_15.10   Sat Apr 16 13:34:12 2016  detached        N/A     1.00GB    25.00MB\nvol        datastore1  Ubuntu_15.10   Sat Apr 16 20:13:18 2016  detached        N/A     100.00MB  14.00MB\n\n\n\n\nNote that the \nPolicy\n column shows the named VSAN storage policy created with the same tool\n(vmdkops_admin.py).  Since these example virtual disks live on a VMFS datastore they do not have a storage\npolicy and show up as `N/A\u2019.\n\n\nList selected columns\n\u00b6\n\n\nShow only the selected columns.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls -c volume,datastore,attached-to\nVolume     Datastore   Attached To VM\n---------  ----------  --------------\nlarge-vol  datastore1  detached\nvol        datastore1  detached\n\n\n\n\nNote that the that the choices are given in a comma separated list with no spaces, and are shown in\nthe help given above with \nvmdkops_admin ls -h\n.\n\n\npolicy\n\u00b6\n\n\nCreate, configure and show the VSAN policy names and their corresponding VSAN policy strings. Also show whether or not they are in use.\n\n\nHelp\n\u00b6\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy -h\nusage: vmdkops_admin.py policy [-h] {rm,create,ls,update} ...\n\npositional arguments:\n  {rm,create,ls,update}\n    rm                  Remove a storage policy\n    create              Create a storage policy\n    ls                  List storage policies and volumes using those policies\n    update              Update the definition of a storage policy and all VSAN\n                        objects using that policy\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n\n\n\nCreate\n\u00b6\n\n\nCreate a VSAN storage policy.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy create --name some-policy --content '((\"proportionalCapacity\" i0)(\"hostFailuresToTolerate\" i0)'\nSuccessfully created policy: some-policy\n\n\n\n\nNote that the VSAN storage policy string given with \n--content\n is a standard VSAN storage policy\nstring.  Please refer to the \nVSAN documentation\n\nfor storage policy options.\n\n\nList\n\u00b6\n\n\nList all VSAN storage policies.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy ls\nPolicy Name  Policy Content                                             Active\n-----------  ---------------------------------------------------------  ------\nsome-policy  ((\"proportionalCapacity\" i0)(\"hostFailuresToTolerate\" i0)  Unused\n\n\n\n\nWhen creating a virtual disk using \ndocker volume create\n, the policy name should be given with the \n-o\n\noption such as \ndocker volume create --driver=vmdk --name=some-vol -o vsan-policy-name=some-policy\n.\nThe number of virtual disks using the policy will then show up in the \nActive\n column.\n\n\nUpdate\n\u00b6\n\n\nUpdate a VSAN storage policy.\n\n\nThis command will update a VSAN storage policy for all virtual disks currently using this policy. If\nthe command fails, the number of virtual disks that were successfully updated and the number that\nfailed to update will be shown. The names of the virtual disks that failed to update will be logged\nso that manual action can be taken.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy update --name some-policy --content '((\"proportionalCapacity\" i1)'\nThis operation may take a while. Please be patient.\nSuccessfully updated policy: some-policy\n\n\n\n\nRemove\n\u00b6\n\n\nRemove a VSAN storage policy. Note that a storage policy cannot be removed if it is currently in use\nby one or more virtual disks.\n\n\nThe ability to list which virtual disks are using a specific storage policy, change storage policies\nfor a virtual disk, and reset virtual disks to the default storage policy is a necessary\nenhancement tracked \nhere\n.\n\n\n[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy rm some-policy\nSuccessfully removed policy: some-policy\n\n\n\n\nSet\n\u00b6\n\n\nModify attribute settings on a given volume. The volume is identified by its name and datastore, \nfor example if the volume name is \ncontainer-vol\n then the volume is specified as \u201ccontainer-vol@datastore-name\u201d.\nThe attributes to set/modify are specified as a comma separated list as \u201c\n=\n, \n=\n....\u201d. For example,\na command line would look like this.\n\n\n$ vmdkops-admin set --volume=<volume@datastore> --options=\"<attr1>=<value>, <attr2>=<value>, ...\"\n\n\n\n\nThe volume attributes are set and take effect only the next time the volume attached to a VM. The changes do not impact any VM\nthats currently using the volume. For the present, only the \u201caccess\u201d attribute is supported to be modified via this command, and\ncan be set to either of the allowed values \u201cread-only\u201d or \u201cread-write\u201d.\n\n\nSet command allows the admin to enforce a volume to be read-only. \nThis removes the need to depend on \nDocker\u2019s run command options for volume access\n (\ndocker run -v /vol:/vol:ro\n). \n\n\nA sample use case:\n\n\n\n\nCreate a volume, attach to a container (default is read-write).\n\n\nMaster the volume with libraries commonly used by the target application (or a cluster of apps that form a docker app bundle).\n\n\nUse admin CLI to flip the access attribute to read-only.\n\n\nMake those libraries available to the containers in the app bundle and they can all share the same libraries.\n\n\n\n\nThe container images themselves can be smaller as they share the libs and possibly binaries from read-only volumes.\n\n\nStatus\n\u00b6\n\n\nShow config and run-time information about the service.\n\n\n[root@localhost:~]  /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py status\n Version: 1.0.0-0.0.1\n Status: Running\n Pid: 161104\n Port: 1019\n LogConfigFile: /etc/vmware/vmdkops/log_config.json\n LogFile: /var/log/vmware/vmdk_ops.log\n LogLevel: INFO",
            "title": "Admin CLI"
        },
        {
            "location": "/user-guide/admin-cli/#introduction",
            "text": "In the context of the Docker volume plugin for vSphere, each ESXi host manages multiple VMs, with\neach of them acting as a Docker host. The Docker engine on these hosts communicates with the Docker\nvolume plugin in order to create and delete virtual disks (VMDKs), as well as mount them as Docker\nvolumes. These virtual disks may live on any datastore accessible to the ESXi host and are managed\nby the Docker user via the Docker CLI. However, the Docker CLI is limited in what visibility it can\nprovide to the user. Furthermore, it is desirable that an administrator be able to get a global view\nof all virtual disks created and in use on the host.  For these reasons, an admin CLI has been\ncreated that runs on the ESXi host and that provides access to information not visible from the\nDocker CLI. The remainder of this document will describe each admin CLI command and provide examples\nof their usage.",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/admin-cli/#ls",
            "text": "",
            "title": "ls"
        },
        {
            "location": "/user-guide/admin-cli/#help",
            "text": "[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls -h\nusage: vmdkops_admin.py ls [-h] [-c Col1,Col2,...]\n\noptional arguments:\n  -h, --help        show this help message and exit\n  -c Col1,Col2,...  Display selected columns: Choices = ['volume',\n                    'datastore', 'created-by', 'created', 'attached-to',\n                    'policy', 'capacity', 'used']",
            "title": "Help"
        },
        {
            "location": "/user-guide/admin-cli/#list-all",
            "text": "List all properties for all Docker volumes that exist on datastores accessible to the host.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls\nVolume     Datastore   Created By VM  Created                   Attached To VM  Policy  Capacity  Used\n---------  ----------  -------------  ------------------------  --------------  ------  --------  -------\nlarge-vol  datastore1  Ubuntu_15.10   Sat Apr 16 13:34:12 2016  detached        N/A     1.00GB    25.00MB\nvol        datastore1  Ubuntu_15.10   Sat Apr 16 20:13:18 2016  detached        N/A     100.00MB  14.00MB  Note that the  Policy  column shows the named VSAN storage policy created with the same tool\n(vmdkops_admin.py).  Since these example virtual disks live on a VMFS datastore they do not have a storage\npolicy and show up as `N/A\u2019.",
            "title": "List All"
        },
        {
            "location": "/user-guide/admin-cli/#list-selected-columns",
            "text": "Show only the selected columns.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py ls -c volume,datastore,attached-to\nVolume     Datastore   Attached To VM\n---------  ----------  --------------\nlarge-vol  datastore1  detached\nvol        datastore1  detached  Note that the that the choices are given in a comma separated list with no spaces, and are shown in\nthe help given above with  vmdkops_admin ls -h .",
            "title": "List selected columns"
        },
        {
            "location": "/user-guide/admin-cli/#policy",
            "text": "Create, configure and show the VSAN policy names and their corresponding VSAN policy strings. Also show whether or not they are in use.",
            "title": "policy"
        },
        {
            "location": "/user-guide/admin-cli/#help_1",
            "text": "[root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy -h\nusage: vmdkops_admin.py policy [-h] {rm,create,ls,update} ...\n\npositional arguments:\n  {rm,create,ls,update}\n    rm                  Remove a storage policy\n    create              Create a storage policy\n    ls                  List storage policies and volumes using those policies\n    update              Update the definition of a storage policy and all VSAN\n                        objects using that policy\n\noptional arguments:\n  -h, --help            show this help message and exit",
            "title": "Help"
        },
        {
            "location": "/user-guide/admin-cli/#create",
            "text": "Create a VSAN storage policy.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy create --name some-policy --content '((\"proportionalCapacity\" i0)(\"hostFailuresToTolerate\" i0)'\nSuccessfully created policy: some-policy  Note that the VSAN storage policy string given with  --content  is a standard VSAN storage policy\nstring.  Please refer to the  VSAN documentation \nfor storage policy options.",
            "title": "Create"
        },
        {
            "location": "/user-guide/admin-cli/#list",
            "text": "List all VSAN storage policies.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy ls\nPolicy Name  Policy Content                                             Active\n-----------  ---------------------------------------------------------  ------\nsome-policy  ((\"proportionalCapacity\" i0)(\"hostFailuresToTolerate\" i0)  Unused  When creating a virtual disk using  docker volume create , the policy name should be given with the  -o \noption such as  docker volume create --driver=vmdk --name=some-vol -o vsan-policy-name=some-policy .\nThe number of virtual disks using the policy will then show up in the  Active  column.",
            "title": "List"
        },
        {
            "location": "/user-guide/admin-cli/#update",
            "text": "Update a VSAN storage policy.  This command will update a VSAN storage policy for all virtual disks currently using this policy. If\nthe command fails, the number of virtual disks that were successfully updated and the number that\nfailed to update will be shown. The names of the virtual disks that failed to update will be logged\nso that manual action can be taken.  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy update --name some-policy --content '((\"proportionalCapacity\" i1)'\nThis operation may take a while. Please be patient.\nSuccessfully updated policy: some-policy",
            "title": "Update"
        },
        {
            "location": "/user-guide/admin-cli/#remove",
            "text": "Remove a VSAN storage policy. Note that a storage policy cannot be removed if it is currently in use\nby one or more virtual disks.  The ability to list which virtual disks are using a specific storage policy, change storage policies\nfor a virtual disk, and reset virtual disks to the default storage policy is a necessary\nenhancement tracked  here .  [root@localhost:~] /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py policy rm some-policy\nSuccessfully removed policy: some-policy",
            "title": "Remove"
        },
        {
            "location": "/user-guide/admin-cli/#set",
            "text": "Modify attribute settings on a given volume. The volume is identified by its name and datastore, \nfor example if the volume name is  container-vol  then the volume is specified as \u201ccontainer-vol@datastore-name\u201d.\nThe attributes to set/modify are specified as a comma separated list as \u201c = ,  = ....\u201d. For example,\na command line would look like this.  $ vmdkops-admin set --volume=<volume@datastore> --options=\"<attr1>=<value>, <attr2>=<value>, ...\"  The volume attributes are set and take effect only the next time the volume attached to a VM. The changes do not impact any VM\nthats currently using the volume. For the present, only the \u201caccess\u201d attribute is supported to be modified via this command, and\ncan be set to either of the allowed values \u201cread-only\u201d or \u201cread-write\u201d.  Set command allows the admin to enforce a volume to be read-only. \nThis removes the need to depend on  Docker\u2019s run command options for volume access  ( docker run -v /vol:/vol:ro ).   A sample use case:   Create a volume, attach to a container (default is read-write).  Master the volume with libraries commonly used by the target application (or a cluster of apps that form a docker app bundle).  Use admin CLI to flip the access attribute to read-only.  Make those libraries available to the containers in the app bundle and they can all share the same libraries.   The container images themselves can be smaller as they share the libs and possibly binaries from read-only volumes.",
            "title": "Set"
        },
        {
            "location": "/user-guide/admin-cli/#status",
            "text": "Show config and run-time information about the service.  [root@localhost:~]  /usr/lib/vmware/vmdkops/bin/vmdkops_admin.py status\n Version: 1.0.0-0.0.1\n Status: Running\n Pid: 161104\n Port: 1019\n LogConfigFile: /etc/vmware/vmdkops/log_config.json\n LogFile: /var/log/vmware/vmdk_ops.log\n LogLevel: INFO",
            "title": "Status"
        },
        {
            "location": "/user-guide/docker-volume-cli/",
            "text": "Using the plugin in Docker\n\n\nDocker volume create options\n\n\nsize\n\n\npolicy\n\n\ndiskformat\n\n\nattach_as\n\n\naccess\n\n\nfstype\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the plugin in Docker\n\u00b6\n\n\nThe plugin works with existing Docker volume commands.\n\n\n\n\nDocker volume create\n\n\nDocker volume inspect\n\n\nDocker volume ls\n\n\nDocker volume rm\n\n\n\n\n\n\n\nDocker volume create options\n\u00b6\n\n\nsize\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb\n\n\n\n\nThe volume units can be \nkb, mb, gb and tb\n\n\nThe default volume size is 100mb\n\n\npolicy\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o policy=allflash\n\n\n\n\nPolicy needs to be created via the vmdkops-admin-cli. Once policy is created, it can be addressed during create by passing the \n-o policy\n flag.\n\n\ndiskformat\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=zeroedthick\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=thin\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=eagerzeroedthick\n\n\n\n\nDocker volumes are backed by VMDKs. VMDKs support multiple \ntypes\n\n\nCurrently the following are supported\n\n\n\n\nThick Provision Lazy Zeroed (\nzeroedthick\n)\n\n\nThin Provision (\nthin\n)\n\n\nThick Provision Eager Zeroed (\neagerzeroedthick\n)\n\n\n\n\nattach_as\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o attach_as=independent_persistent\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o attach_as=persistent\n\n\n\n\nDocker volumes are backed by VMDKs. VMDKs are attached to the VM in which Docker is requesting for a volume during Docker run. VMDKs can be attached in \ndifferent modes.\n\n\nCurrently the following are supported\n\n\n\n\npersistent\n: If the VMDK is attached as persistent it will be part of a VM snapshot. If a VM snapshot has been taken while the Docker volume is attached to a VM, the Docker volume then continues to be attached to the VM that was snapshotted.\n\n\nindependent_persistent\n: If the VMDK is attached as independent_persistent it will not be part of a VM snapshot. The Docker volume can be attached to any VM that can access the datastore independent of snapshots.\n\n\n\n\naccess\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o access=read-only -o diskformat=thin\ndocker volume create --driver=vmdk --name=MyVolume -o access=read-write -o diskformat=thin (default)\n\n\n\n\nThe access mode determines if the volume is modifiable by containers in a VM. The access mode allows to first create a volume with write access and initialize it with binary images, libraries (for exmple), and subsequently change the access to \u201cread-only\u201d (via the admin CLI). Thereby, creating content sharable by all containers in a VM.\n\n\nfstype\n\u00b6\n\n\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o fstype=xfs\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o fstype=ext4 (default)\n\n\n\n\nSpecifies which filesystem will be created on the new volume. The volume-plugin will search for a existing /sbin/mkfs.\nfstype\n on the docker host to create the filesystem, and if not found it will return a list of filesystems for which it has found a corresponding mkfs. The specified filesystem must be supported by the running kernel and support labels (-L flag for mkfs). Defaults to ext4 if not specified.",
            "title": "Basic commands"
        },
        {
            "location": "/user-guide/docker-volume-cli/#using-the-plugin-in-docker",
            "text": "The plugin works with existing Docker volume commands.   Docker volume create  Docker volume inspect  Docker volume ls  Docker volume rm",
            "title": "Using the plugin in Docker"
        },
        {
            "location": "/user-guide/docker-volume-cli/#docker-volume-create-options",
            "text": "",
            "title": "Docker volume create options"
        },
        {
            "location": "/user-guide/docker-volume-cli/#size",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o size=10gb  The volume units can be  kb, mb, gb and tb  The default volume size is 100mb",
            "title": "size"
        },
        {
            "location": "/user-guide/docker-volume-cli/#policy",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o size=10gb -o policy=allflash  Policy needs to be created via the vmdkops-admin-cli. Once policy is created, it can be addressed during create by passing the  -o policy  flag.",
            "title": "policy"
        },
        {
            "location": "/user-guide/docker-volume-cli/#diskformat",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=zeroedthick\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=thin\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o diskformat=eagerzeroedthick  Docker volumes are backed by VMDKs. VMDKs support multiple  types  Currently the following are supported   Thick Provision Lazy Zeroed ( zeroedthick )  Thin Provision ( thin )  Thick Provision Eager Zeroed ( eagerzeroedthick )",
            "title": "diskformat"
        },
        {
            "location": "/user-guide/docker-volume-cli/#attach_as",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o size=10gb -o attach_as=independent_persistent\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o attach_as=persistent  Docker volumes are backed by VMDKs. VMDKs are attached to the VM in which Docker is requesting for a volume during Docker run. VMDKs can be attached in  different modes.  Currently the following are supported   persistent : If the VMDK is attached as persistent it will be part of a VM snapshot. If a VM snapshot has been taken while the Docker volume is attached to a VM, the Docker volume then continues to be attached to the VM that was snapshotted.  independent_persistent : If the VMDK is attached as independent_persistent it will not be part of a VM snapshot. The Docker volume can be attached to any VM that can access the datastore independent of snapshots.",
            "title": "attach_as"
        },
        {
            "location": "/user-guide/docker-volume-cli/#access",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o access=read-only -o diskformat=thin\ndocker volume create --driver=vmdk --name=MyVolume -o access=read-write -o diskformat=thin (default)  The access mode determines if the volume is modifiable by containers in a VM. The access mode allows to first create a volume with write access and initialize it with binary images, libraries (for exmple), and subsequently change the access to \u201cread-only\u201d (via the admin CLI). Thereby, creating content sharable by all containers in a VM.",
            "title": "access"
        },
        {
            "location": "/user-guide/docker-volume-cli/#fstype",
            "text": "docker volume create --driver=vmdk --name=MyVolume -o size=10gb -o fstype=xfs\ndocker volume create --driver=vmdk --name=MyVolume -o size=10gb -o fstype=ext4 (default)  Specifies which filesystem will be created on the new volume. The volume-plugin will search for a existing /sbin/mkfs. fstype  on the docker host to create the filesystem, and if not found it will return a list of filesystems for which it has found a corresponding mkfs. The specified filesystem must be supported by the running kernel and support labels (-L flag for mkfs). Defaults to ext4 if not specified.",
            "title": "fstype"
        },
        {
            "location": "/user-guide/datastores/",
            "text": "Consuming multiple data stores\n\u00b6\n\n\nThe plugin by default creates a volume in the datastore that hosts the VM. Optionally Docker volumes can be provisioned on a specific datastore by directly addressing the datastore when specifying the name in the format <volume name>@<datastore name>",
            "title": "Multiple Datastores"
        },
        {
            "location": "/user-guide/datastores/#consuming-multiple-data-stores",
            "text": "The plugin by default creates a volume in the datastore that hosts the VM. Optionally Docker volumes can be provisioned on a specific datastore by directly addressing the datastore when specifying the name in the format <volume name>@<datastore name>",
            "title": "Consuming multiple data stores"
        },
        {
            "location": "/user-guide/esx-overview/",
            "text": "Docker volumes on ESX\n\u00b6\n\n\nDocker volumes on vSphere are powered by \nVMDKs\n. VMDKs can reside on datastores created on top of varying backends (NFS, SAN, VSAN, vVol). Docker-volume-vsphere plugin supports high availability for Docker volumes and allows for any VM requesting for the volume to gain access to it. The ability to attach the VMDK(Docker volume) to any VM when paired with a cluster manager such as Swarm allows a persistent container to be highly available.\n\n\nThe VMDKs on ESX are stored on the datastore in a folder that is independent of a VM.",
            "title": "Volume Layout"
        },
        {
            "location": "/user-guide/esx-overview/#docker-volumes-on-esx",
            "text": "Docker volumes on vSphere are powered by  VMDKs . VMDKs can reside on datastores created on top of varying backends (NFS, SAN, VSAN, vVol). Docker-volume-vsphere plugin supports high availability for Docker volumes and allows for any VM requesting for the volume to gain access to it. The ability to attach the VMDK(Docker volume) to any VM when paired with a cluster manager such as Swarm allows a persistent container to be highly available.  The VMDKs on ESX are stored on the datastore in a folder that is independent of a VM.",
            "title": "Docker volumes on ESX"
        },
        {
            "location": "/user-guide/faq/",
            "text": "General\n\n\nWhere do I get the binaries ? What about the source ?\n\n\nHow to install and use the driver?\n\n\nHow do I run the setup on my laptop?\n\n\n\n\n\n\nTroubleshooting\n\n\nDocker Plugin to ESX Backend Communication.\n\n\nWhat is VMCI and vSock and why is it needed?\n\n\nI see \u201cconnection reset by peer (errno=104)\u201d in the plugin logs, what is the cause?\n\n\nI see \u201caddress family not supported by protocol (errno=97)\u201d in the plugin logs, what is the cause?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeneral\n\u00b6\n\n\nWhere do I get the binaries ? What about the source ?\n\u00b6\n\n\nPlease look at \nGitHub Releases\n for binaries. Github releases allow downloading of source for a release in addition to git clone.\n\n\nHow to install and use the driver?\n\u00b6\n\n\nPlease see README.md in the for the release by clicking on the tag for the release. Example: \nREADME\n\n\nHow do I run the setup on my laptop?\n\u00b6\n\n\nFollow the \nguide on the wiki\n\n\nTroubleshooting\n\u00b6\n\n\nDocker Plugin to ESX Backend Communication.\n\u00b6\n\n\nWhat is VMCI and vSock and why is it needed?\n\u00b6\n\n\nThe docker volume plugin for vSphere uses VMCI and vSock to communicate with the hypervisor to implement the volume operations. It comes installed on Photon OS and on Ubuntu follow \nVMware tools installation\n or use open vmtools \n\napt-get install open-vm-tools\n. \nAdditional reading for differences between VMware tools and open vm tools: \n\n\n\n\nOpen-VM-Tools (OVT): The Future Of VMware Tools For Linux\n \n\n\nVMware Tools vs Open VM Tools\n\n\n\n\nI see \u201cconnection reset by peer (errno=104)\u201d in the \nplugin logs\n, what is the cause?\n\u00b6\n\n\n104 is a standard linux error (\n#define ECONNRESET      104     /* Connection reset by peer */\n)\n\n\nIt occurs if the Docker volume plugin cannot communicate to the ESX back end. This can happen if:\n   * VMCI and/or vSock kernel modules are not loaded or the kernel does not support VMCI and vSock. Please read \u201cWhat is VMCI and vSock and why is it needed?\u201d above.\n   * ESX service is not running. \n/etc/init.d/vmdk-opsd status\n. Check \nESX Logs\n\n   * ESX service and the plugin are not communicating on the same port. \nps -c | grep vmdk #On ESX\n and \nps aux| grep docker-volume-vsphere # On VM\n check the port param passed in and make sure they are the same\n\n\nI see \u201caddress family not supported by protocol (errno=97)\u201d in the \nplugin logs\n, what is the cause?\n\u00b6\n\n\n97 is a standard linux error (\n#define EAFNOSUPPORT    97      /* Address family not supported by protocol */\n)\n\n\nIt occurs if the linux kernel does not know about the AF family used for VMCI communication. Please read \n\u201cWhat is VMCI and vSock and why is it needed?\u201d\n above.",
            "title": "FAQ"
        },
        {
            "location": "/user-guide/faq/#general",
            "text": "",
            "title": "General"
        },
        {
            "location": "/user-guide/faq/#where-do-i-get-the-binaries-what-about-the-source",
            "text": "Please look at  GitHub Releases  for binaries. Github releases allow downloading of source for a release in addition to git clone.",
            "title": "Where do I get the binaries ? What about the source ?"
        },
        {
            "location": "/user-guide/faq/#how-to-install-and-use-the-driver",
            "text": "Please see README.md in the for the release by clicking on the tag for the release. Example:  README",
            "title": "How to install and use the driver?"
        },
        {
            "location": "/user-guide/faq/#how-do-i-run-the-setup-on-my-laptop",
            "text": "Follow the  guide on the wiki",
            "title": "How do I run the setup on my laptop?"
        },
        {
            "location": "/user-guide/faq/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/user-guide/faq/#docker-plugin-to-esx-backend-communication",
            "text": "",
            "title": "Docker Plugin to ESX Backend Communication."
        },
        {
            "location": "/user-guide/faq/#what-is-vmci-and-vsock-and-why-is-it-needed",
            "text": "The docker volume plugin for vSphere uses VMCI and vSock to communicate with the hypervisor to implement the volume operations. It comes installed on Photon OS and on Ubuntu follow  VMware tools installation  or use open vmtools  apt-get install open-vm-tools . \nAdditional reading for differences between VMware tools and open vm tools:    Open-VM-Tools (OVT): The Future Of VMware Tools For Linux    VMware Tools vs Open VM Tools",
            "title": "What is VMCI and vSock and why is it needed?"
        },
        {
            "location": "/user-guide/faq/#i-see-connection-reset-by-peer-errno104-in-the-plugin-logs-what-is-the-cause",
            "text": "104 is a standard linux error ( #define ECONNRESET      104     /* Connection reset by peer */ )  It occurs if the Docker volume plugin cannot communicate to the ESX back end. This can happen if:\n   * VMCI and/or vSock kernel modules are not loaded or the kernel does not support VMCI and vSock. Please read \u201cWhat is VMCI and vSock and why is it needed?\u201d above.\n   * ESX service is not running.  /etc/init.d/vmdk-opsd status . Check  ESX Logs \n   * ESX service and the plugin are not communicating on the same port.  ps -c | grep vmdk #On ESX  and  ps aux| grep docker-volume-vsphere # On VM  check the port param passed in and make sure they are the same",
            "title": "I see \"connection reset by peer (errno=104)\" in the plugin logs, what is the cause?"
        },
        {
            "location": "/user-guide/faq/#i-see-address-family-not-supported-by-protocol-errno97-in-the-plugin-logs-what-is-the-cause",
            "text": "97 is a standard linux error ( #define EAFNOSUPPORT    97      /* Address family not supported by protocol */ )  It occurs if the linux kernel does not know about the AF family used for VMCI communication. Please read  \u201cWhat is VMCI and vSock and why is it needed?\u201d  above.",
            "title": "I see \"address family not supported by protocol (errno=97)\" in the plugin logs, what is the cause?"
        },
        {
            "location": "/blog/2016-9-28/",
            "text": "0.7 Release\n\u00b6\n\n\nWe continue our monthly release cycle with our \nSeptember release\n\n\nThanks to \nBruno Moura\u2019s\n \nwork\n, Docker volume plugin for vSphere now supports selection of file system format when creating a new docker volume.\n\n\nAbility to set a volume \nread-only\n is now supported by the plugin. The \nadmin cli\n allows the admin to set a volume to be read only.\n\n\nComing up\n\u00b6\n\n\nOne of the major features in the pipeline is multi-tenancy and vCenter integration. More about that soon..\n\n\nExternal Blog entries\n\u00b6\n\n\n\n\nCormac Hogan\n\n\nOverview\n\n\nDocker Volume Driver for vSphere\n\n\nDocker Volume Driver for vSphere \u2013 short video\n\n\n\n\n\n\nDocker + VSAN\n\n\nDocker Volume Driver for vSphere on Virtual SAN\n\n\nUsing vSphere docker volume driver to run Project Harbor on VSAN\n\n\nDocker Volume Driver for vSphere using policies on VSAN\n\n\n\n\n\n\n0.7 Release Overview\n\n\nSome nice enhancements to Docker Volume Driver for vSphere v0.7\n\n\n\n\n\n\n\n\n\n\nWilliam Lam\n\n\nGetting Started with Tech Preview of Docker Volume Driver for vSphere - updated\n\n\n\n\n\n\nVirtual Blocks\n\n\nvSphere Docker Volume Driver Brings Benefits of vSphere Storage to Containers\n\n\n\n\n\n\nRyan Kelly\n\n\nHow to use the Docker Volume Driver for vSphere with Photon OS",
            "title": "Release announcement and updates"
        },
        {
            "location": "/blog/2016-9-28/#07-release",
            "text": "We continue our monthly release cycle with our  September release  Thanks to  Bruno Moura\u2019s   work , Docker volume plugin for vSphere now supports selection of file system format when creating a new docker volume.  Ability to set a volume  read-only  is now supported by the plugin. The  admin cli  allows the admin to set a volume to be read only.",
            "title": "0.7 Release"
        },
        {
            "location": "/blog/2016-9-28/#coming-up",
            "text": "One of the major features in the pipeline is multi-tenancy and vCenter integration. More about that soon..",
            "title": "Coming up"
        },
        {
            "location": "/blog/2016-9-28/#external-blog-entries",
            "text": "Cormac Hogan  Overview  Docker Volume Driver for vSphere  Docker Volume Driver for vSphere \u2013 short video    Docker + VSAN  Docker Volume Driver for vSphere on Virtual SAN  Using vSphere docker volume driver to run Project Harbor on VSAN  Docker Volume Driver for vSphere using policies on VSAN    0.7 Release Overview  Some nice enhancements to Docker Volume Driver for vSphere v0.7      William Lam  Getting Started with Tech Preview of Docker Volume Driver for vSphere - updated    Virtual Blocks  vSphere Docker Volume Driver Brings Benefits of vSphere Storage to Containers    Ryan Kelly  How to use the Docker Volume Driver for vSphere with Photon OS",
            "title": "External Blog entries"
        }
    ]
}